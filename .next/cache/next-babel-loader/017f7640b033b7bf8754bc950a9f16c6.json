{"ast":null,"code":"import httpClient from \"./httpClient\";\nimport convertJsonToFormData from \"../utils/convertJsonToFormData\";\nimport { getItem, removeItem } from \"../utils/localStorage\";\n\nconst getHttpClient = (token = getItem(\"token\"), isMultipartRequest = false, validateStatus = false) => {\n  const axiosConfig = {\n    transformRequest: [(data, headers) => {\n      headers[\"Accept\"] = \"application/json\";\n\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n\n      if (isMultipartRequest) {\n        headers[\"Content-Type\"] = \"multipart/form-data\";\n        return convertJsonToFormData(data);\n      }\n\n      headers[\"Content-Type\"] = \"application/json\";\n      return JSON.stringify(data);\n    }]\n  };\n\n  if (validateStatus) {\n    axiosConfig.validateStatus = function (status) {\n      if (status === 401) {\n        removeItem(\"token\");\n        removeItem(\"cart\");\n        window.location.reload();\n      }\n\n      return status >= 200 && status < 300;\n    };\n  }\n\n  return httpClient(axiosConfig);\n};\n\nexport const getCategories = token => async params => {\n  return await getHttpClient(token).get(\"/categories\", {\n    params\n  }).then(response => response.data);\n};\nexport const getProducts = token => async params => {\n  return await getHttpClient(token).get(\"/products\", {\n    params\n  }).then(response => response.data);\n};\nexport const getProductDetail = token => async id => {\n  return await getHttpClient(token).get(`/products/${id}`).then(response => response.data);\n};\nexport const createPayPalTransaction = () => async (data) => await getHttpClient(getItem(\"token\")).post(`/orders/create-paypal-transaction`, data).then(response => response.data);\nexport const captureOrder = () => async data => {\n  const response = await getHttpClient(getItem(\"token\")).post(`/orders/capture-order`, data);\n  return response.data;\n};\nexport const getOrders = token => async params => {\n  return await getHttpClient(token).get(\"/orders\", {\n    params\n  }).then(response => response.data).catch(e => {\n    var _e$response;\n\n    throw (e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data) || e;\n  });\n};\nexport const login = async data => {\n  return await getHttpClient().post(`/users/login`, data).then(response => response.data).catch(e => {\n    var _e$response2;\n\n    throw (e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.data) || e;\n  });\n};\nexport const forgotPassword = async data => {\n  return await getHttpClient().post(`/users/forgot-password`, data).then(response => response.data).catch(e => {\n    var _e$response3;\n\n    throw (e === null || e === void 0 ? void 0 : (_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : _e$response3.data) || e;\n  });\n};\nexport const register = async data => {\n  return await getHttpClient().post(`/users/register`, data).then(response => response.data).catch(e => {\n    var _e$response4;\n\n    throw (e === null || e === void 0 ? void 0 : (_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : _e$response4.data) || e;\n  });\n};\nexport const resetPassword = async data => {\n  return await getHttpClient().post(`/users/reset-password`, data).then(response => response.data).catch(e => {\n    var _e$response5;\n\n    throw (e === null || e === void 0 ? void 0 : (_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : _e$response5.data) || e;\n  });\n};\nexport const changePassword = async data => {\n  return await getHttpClient(getItem(\"token\")).post(`/users/change-password`, data).then(response => response.data).catch(e => {\n    var _e$response6;\n\n    throw (e === null || e === void 0 ? void 0 : (_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : _e$response6.data) || e;\n  });\n};\nexport const getUser = token => async params => {\n  return await getHttpClient(token).get(\"/users/current\", {\n    params\n  }).then(response => response.data);\n};","map":null,"metadata":{},"sourceType":"module"}