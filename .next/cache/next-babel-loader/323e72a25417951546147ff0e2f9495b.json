{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { getItem, removeItem, setItem } from \"../utils/localStorage\";\nimport JWTValidator from \"../utils/JWTValidator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AuthStateContext = /*#__PURE__*/createContext();\nconst AuthDispatchContext = /*#__PURE__*/createContext();\n\nconst AuthProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"LOGIN\":\n        setItem(\"token\", action.payload.token);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          authenticated: true\n        });\n\n      case \"LOGOUT\":\n        removeItem(\"token\");\n        return {\n          authenticated: false\n        };\n\n      default:\n        throw new Error(\"undefined action type used\");\n    }\n  }, {\n    authenticated: !!getItem(\"token\") && JWTValidator(getItem(\"token\"))\n  });\n  return /*#__PURE__*/_jsx(AuthStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsx(AuthDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    })\n  });\n};\n\nexport default AuthProvider;\nexport const useAuthContext = () => {\n  const context = useContext(AuthStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useAuthContext must be used within a AuthProvider\");\n  }\n\n  return context;\n};\nexport const useAuthDispatch = () => {\n  const context = useContext(AuthDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\"useAuthDispatch must be used within a AuthProvider\");\n  }\n\n  return context;\n};\nexport const useAuth = () => {\n  const authContext = useAuthContext();\n  const authDispatch = useAuthDispatch();\n\n  const login = token => {\n    authDispatch({\n      type: \"LOGIN\",\n      payload: {\n        token\n      }\n    });\n  };\n\n  const logout = () => {\n    authDispatch({\n      type: \"LOGOUT\",\n      payload: null\n    });\n  };\n\n  return {\n    authenticated: authContext.authenticated,\n    login,\n    logout\n  };\n};","map":null,"metadata":{},"sourceType":"module"}