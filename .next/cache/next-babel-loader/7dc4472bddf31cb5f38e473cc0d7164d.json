{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { getItem, setItem } from \"../utils/localStorage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CartStateContext = /*#__PURE__*/createContext();\nconst CartDispatchContext = /*#__PURE__*/createContext();\nconst ID_KEY = \"_id\";\n\nconst calculateTotal = (items, key = \"total_amount\") => {\n  if (items.length === 0) return 0;\n  return items.map(item => item[key]).reduce((t, i) => t + i, 0);\n};\n\nconst CartProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"ADD_CART_ITEM\":\n        if (!state.items.find(item => item[ID_KEY] === action.payload.item[ID_KEY])) state.items.push(action.payload.item);\n        break;\n\n      case \"UPDATE_CART_ITEM\":\n        state.items = state.items.map(item => {\n          if (item[ID_KEY] === action.payload.id) return _objectSpread(_objectSpread({}, item), action.payload.item);\n          return item;\n        });\n        break;\n\n      case \"REMOVE_CART_ITEM\":\n        state.items = state.items.filter(item => item[ID_KEY] !== action.payload.id);\n        break;\n\n      case \"SET_SHIPPING_ADDRESS_ID\":\n        state.shipping_address_id = action.payload.shipping_address_id;\n        break;\n\n      case \"CLEAR_CART\":\n        state.items = [];\n        state.shipping_address_id = null;\n        break;\n\n      default:\n        throw new Error(\"undefined action type used\");\n    }\n\n    state.total_amount = calculateTotal(state.items, \"total_amount\");\n    setItem(\"cart\", JSON.stringify(state));\n    return _objectSpread(_objectSpread({}, state), {}, {\n      items: [...state.items]\n    });\n  }, JSON.parse(getItem(\"cart\") || null) || {\n    items: [],\n    total_amount: 0,\n    shipping_address_id: null\n  });\n  return /*#__PURE__*/_jsx(CartStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsx(CartDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    })\n  });\n};\n\nexport default CartProvider;\nexport const useCartState = () => {\n  const context = useContext(CartStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useCartStateContext must be used within a CartProvider\");\n  }\n\n  return context;\n};\nexport const useCartDispatchContext = () => {\n  const context = useContext(CartDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\"useCartDispatchContext must be used within a CartProvider\");\n  }\n\n  return context;\n};\nexport const useCartActions = () => {\n  const state = useCartState();\n  const dispatch = useCartDispatchContext();\n\n  const findItem = id => state.items.find(item => item[ID_KEY] === id);\n\n  const countItem = () => state.items.length;\n\n  const addItem = item => {\n    dispatch({\n      type: \"ADD_CART_ITEM\",\n      payload: {\n        item\n      }\n    });\n  };\n\n  const updateItem = (id, item) => {\n    dispatch({\n      type: \"UPDATE_CART_ITEM\",\n      payload: {\n        id,\n        item\n      }\n    });\n  };\n\n  const removeItem = id => {\n    dispatch({\n      type: \"REMOVE_CART_ITEM\",\n      payload: {\n        id\n      }\n    });\n  };\n\n  const setShippingAddressId = id => {\n    dispatch({\n      type: \"SET_SHIPPING_ADDRESS_ID\",\n      payload: {\n        shipping_address_id: id\n      }\n    });\n  };\n\n  const clearCart = () => {\n    dispatch({\n      type: \"CLEAR_CART\",\n      payload: null\n    });\n  };\n\n  return {\n    findItem,\n    countItem,\n    addItem,\n    updateItem,\n    removeItem,\n    setShippingAddressId,\n    clearCart\n  };\n};","map":null,"metadata":{},"sourceType":"module"}